// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;

namespace MachineLearning4Water_Models
{
    public partial class ConsumHabitatgesModel
    {
        public const string RetrainFilePath =  @"E:\Informació habitatges_Data.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;
        public const bool RetrainAllowQuoting =  false;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader, allowQuoting: allowQuoting);
        }


        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Persones_habitatge", @"Persones_habitatge"),new InputOutputColumnPair(@"Tipus_habitatge", @"Tipus_habitatge"),new InputOutputColumnPair(@"Lavabos_habitatge", @"Lavabos_habitatge"),new InputOutputColumnPair(@"Rentavaixelles", @"Rentavaixelles"),new InputOutputColumnPair(@"Us_banyera", @"Us_banyera"),new InputOutputColumnPair(@"Wc_diari", @"Wc_diari"),new InputOutputColumnPair(@"Dutxes_diari", @"Dutxes_diari"),new InputOutputColumnPair(@"Tipus_caldera", @"Tipus_caldera"),new InputOutputColumnPair(@"Antiguitat_caldera", @"Antiguitat_caldera"),new InputOutputColumnPair(@"Caldera_antiga", @"Caldera_antiga"),new InputOutputColumnPair(@"Distancia_caldera_dutxa", @"Distancia_caldera_dutxa"),new InputOutputColumnPair(@"Temps_aigua_calenta", @"Temps_aigua_calenta"),new InputOutputColumnPair(@"Tipus_descarrega", @"Tipus_descarrega"),new InputOutputColumnPair(@"Cisterna_capacitat", @"Cisterna_capacitat"),new InputOutputColumnPair(@"Seguiment_factura", @"Seguiment_factura"),new InputOutputColumnPair(@"Estalvies_aigua", @"Estalvies_aigua")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Persones_habitatge",@"Tipus_habitatge",@"Lavabos_habitatge",@"Rentavaixelles",@"Us_banyera",@"Wc_diari",@"Dutxes_diari",@"Tipus_caldera",@"Antiguitat_caldera",@"Caldera_antiga",@"Distancia_caldera_dutxa",@"Temps_aigua_calenta",@"Tipus_descarrega",@"Cisterna_capacitat",@"Seguiment_factura",@"Estalvies_aigua"}))      
                                    .Append(mlContext.Regression.Trainers.FastTree(new FastTreeRegressionTrainer.Options(){NumberOfLeaves=5,MinimumExampleCountPerLeaf=28,NumberOfTrees=4,MaximumBinCountPerFeature=302,FeatureFraction=0.9512948348806477,LearningRate=0.6324443804411668,LabelColumnName=@"Consum_mensual_m3",FeatureColumnName=@"Features",DiskTranspose=false}));

            return pipeline;
        }
    }
 }
